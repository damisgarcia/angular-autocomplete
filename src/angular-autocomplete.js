// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';

  /**
    * @ngdoc directive
    * @name angular-autocomplete
    * @description
    *
   */

  /*
   *
   * @private
   *
   */
  var autocomplete, parseData, setRemote;

  parseData = function(result, params, scope, filter) {
    var data, filterResult;
    filterResult = [];
    if (result instanceof Array) {
      filterResult = filter('filter')(result, params.term);
    } else if (result.hasOwnProperty("data")) {
      filterResult = filter('filter')(result.data, params.term);
    }
    data = $.map(filterResult, function(item) {
      var response;
      response = {
        id: item[scope.id],
        text: item[scope.text],
        $object: item
      };
      if (scope.hasOwnProperty("subtitle")) {
        response.subtitle = item[scope.subtitle];
      }
      if (scope.hasOwnProperty("picture")) {
        response.picture = item[scope.picture];
      }
      return response;
    });
    return data;
  };

  setRemote = function(url, scope, filter) {
    var remote;
    remote = {
      url: url,
      dataType: scope.dataType,
      delay: 250,
      data: function(params) {
        return {
          q: params.term,
          page: params.page
        };
      },
      processResults: function(data, params) {
        params.page = params.page || 1;
        return {
          results: parseData(data, params, scope, filter),
          pagination: {
            more: params.page * 30 < data.total_count
          }
        };
      },
      cache: true
    };
    return remote;
  };


  /*
   * @public
   */

  autocomplete = function($filter) {
    return {
      restrict: 'A',
      scope: {
        ngModel: '=',
        select2: '=',
        optionId: '@',
        optionText: '@',
        optionSubText: '@'
      },
      link: function(scope, element, attrs) {
        var options, templateResult, url;
        if (!scope.select2.hasOwnProperty("id")) {
          scope.select2.id = "id";
        }
        if (!scope.select2.hasOwnProperty("text")) {
          scope.select2.text = "text";
        }
        templateResult = function(item) {
          scope.item = item;
          if (!item.id) {
            return item.text;
          }
          if (item.hasOwnProperty('subtitle') && !item.hasOwnProperty('picture')) {
            return $("<p>" + item.text + " <br> <small>" + (item.subtitle.join(',')) + "</small></p>");
          } else if (item.hasOwnProperty('picture') && !item.hasOwnProperty('subtitle')) {
            return $("<img src='" + item.picture + "' class='img-circle' width='45' style='display:inline;margin:0 15px;float:left;' /><p>" + item.text + "</p>");
          } else if (item.hasOwnProperty('picture') && item.hasOwnProperty('subtitle')) {
            return $("<img src='" + item.picture + "' class='img-circle' width='45' style='display:inline;margin:0 15px;float:left' /> <p>" + item.text + " <br> <small>" + item.subtitle + "</small></p>");
          } else {
            return item.text;
          }
        };
        element.on("select2:select", function(response) {
          console.log(response);
          scope.ngModel = angular.copy(response.params.data.$object);
          return scope.$apply();
        });
        options = {};
        if (scope.select2.hasOwnProperty("remote")) {
          url = scope.select2.remote;
          options.ajax = setRemote(url, scope.select2, $filter);
        } else if (scope.select2.hasOwnProperty("local")) {
          options.data = scope.select2.local;
        }
        if (scope.select2.hasOwnProperty("theme")) {
          options.theme = scope.select2.theme;
        }
        if (scope.select2.hasOwnProperty("language")) {
          options.language = scope.select2.language;
        }
        if (scope.select2.hasOwnProperty("dataType")) {
          options.dataType = scope.select2.dataType;
        }
        if (scope.select2.hasOwnProperty("minimumInputLength")) {
          options.minimumInputLength = scope.select2.minimumInputLength;
        }
        if (attrs.hasOwnProperty("placeholder")) {
          options.placeholder = attrs.placeholder;
        }
        options.templateResult = templateResult;
        return $(element).select2(options);
      }
    };
  };

  angular.module('angular.autocomplete', []).directive('autocomplete', autocomplete);

  select2.$inject = ['$filter'];

}).call(this);
